{"version":3,"sources":["Components/TodoItem/TodoItem.tsx","constants/api.ts","Components/TodoList/TodoList.tsx","utils/api.ts","index.tsx","App.tsx"],"names":["TodoItem","todo","className","id","title","completed","user","name","SORT_FILTERS","TodoList","todos","useState","sortedTodos","setSortedTodos","sortBy","param","sort","a","b","Number","localeCompare","onClick","map","key","getDataFromServer","url","fetch","data","json","getUsers","users","getToddos","getTodosWithUser","Promise","all","todosWithUser","find","person","userId","ReactDOM","render","setTodos","isLoaded","setIsLoaded","handleStart","filteredTodos","length","type","document","getElementById"],"mappings":"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","file":"static/js/main.1aa282c6.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { TodoWithUser } from '../../constants/types';\nimport 'bulma/css/bulma.css';\n\ninterface Props {\n  todo: TodoWithUser;\n}\n\nexport const TodoItem: FC<Props> = ({ todo }) => (\n  <tr className=\"tr\">\n    <td className=\"td\">{todo.id}</td>\n    <td className=\"td\">{todo.title}</td>\n    <td className=\"td\">{todo.completed ? 'YES' : 'NO'}</td>\n    <td className=\"td\">{todo.user.name}</td>\n  </tr>\n);\n","export const BASE_URL = 'https://jsonplaceholder.typicode.com';\nexport const USERS_URL = '/users';\nexport const TOODS_URL = '/todos';\n\nexport const SORT_FILTERS = {\n  id: 'id',\n  title: 'title',\n  name: 'name',\n  completed: 'completed',\n};\n","import React, { FC, useState } from 'react';\nimport { TodoWithUser } from '../../constants/types';\nimport { TodoItem } from '../TodoItem/TodoItem';\nimport { SORT_FILTERS } from '../../constants/api';\n\ninterface Props {\n  todos: TodoWithUser[];\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  const [sortedTodos, setSortedTodos] = useState<TodoWithUser[]>([...todos]);\n\n  const sortBy = (param: string) => {\n    switch (param) {\n      case SORT_FILTERS.id:\n        setSortedTodos([...sortedTodos]\n          .sort((a, b) => a.id - b.id));\n        break;\n      case SORT_FILTERS.completed:\n        setSortedTodos([...sortedTodos]\n          .sort((a, b) => Number(a.completed) - Number(b.completed)));\n        break;\n      case SORT_FILTERS.name:\n        setSortedTodos([...sortedTodos]\n          .sort((a, b) => a.user.name.localeCompare(b.user.name)));\n        break;\n      case SORT_FILTERS.title:\n        setSortedTodos([...sortedTodos]\n          .sort((a, b) => a.title.localeCompare(b.title)));\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <table className=\"table is-hoverable\">\n      <thead className=\"thead\">\n        <tr className=\"tr\">\n          <th className=\"th\" onClick={() => sortBy('id')}>id</th>\n          <th className=\"th\" onClick={() => sortBy('title')}>title</th>\n          <th className=\"th\" onClick={() => sortBy('completed')}>completed</th>\n          <th className=\"th\" onClick={() => sortBy('name')}>user</th>\n        </tr>\n      </thead>\n      <tbody className=\"tbody\">\n        {sortedTodos.map((todo: TodoWithUser) => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { USERS_URL, TOODS_URL, BASE_URL } from '../constants/api';\nimport {\n  Todo,\n  UserI,\n  TodoWithUser,\n} from '../constants/types';\n\nconst getDataFromServer = async <T>(url: string): Promise<T> => {\n  const data = await fetch(`${BASE_URL}${url}`);\n\n  return data.json();\n};\n\nconst getUsers: () => Promise<UserI[]> = async () => {\n  const users = await getDataFromServer<UserI[]>(USERS_URL);\n\n  return users;\n};\n\nconst getToddos: () => Promise<Todo[]> = async () => {\n  const todos = await getDataFromServer<Todo[]>(TOODS_URL);\n\n  return todos;\n};\n\nexport const getTodosWithUser: () => Promise<TodoWithUser[]> = async () => {\n  const [todos, users] = await Promise.all([\n    getToddos(),\n    getUsers(),\n  ]);\n\n  const todosWithUser = todos.map((todo: Todo) => {\n    const user = users.find((person: UserI) => person.id === todo.userId) as UserI;\n\n    return {\n      ...todo,\n      user,\n    };\n  });\n\n  return todosWithUser;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n","import React, { FC, useState } from 'react';\nimport './App.css';\nimport 'bulma/css/bulma.css';\nimport { TodoList } from './Components/TodoList/TodoList';\nimport { TodoWithUser } from './constants/types';\nimport { getTodosWithUser } from './utils/api';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<TodoWithUser[]>([]);\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n\n  const handleStart = async () => {\n    setIsLoaded(true);\n    const filteredTodos = await getTodosWithUser();\n\n    setTodos(filteredTodos);\n    setIsLoaded(false);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"title\">Dynamic list of TODOs</h1>\n      {!todos.length\n        ? (\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={handleStart}\n          >\n            {isLoaded ? 'Loading.......' : 'Start load'}\n          </button>\n        )\n\n        : (\n          <TodoList\n            todos={todos}\n          />\n        )}\n    </div>\n  );\n};\n"],"sourceRoot":""}